// <auto-generated />
using System;
using Iltuttofare.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Iltuttofare.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250728081106_FixNavegacoesProfissionalSubcategorias")]
    partial class FixNavegacoesProfissionalSubcategorias
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Iltuttofare.Api.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.Profissional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodiceFiscale")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genero")
                        .HasColumnType("text");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Profissionais");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.ProfissionalSubcategoria", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .HasColumnType("integer");

                    b.Property<int>("SubcategoriaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProfissionalId", "SubcategoriaId");

                    b.HasIndex("SubcategoriaId");

                    b.ToTable("ProfissionalSubcategorias");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.SessaoCadastro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoSMS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Validado")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("SessoesCadastro");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.Subcategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Subcategorias");
                });

            modelBuilder.Entity("ProfissionalSubcategoria", b =>
                {
                    b.Property<int>("ProfissionaisId")
                        .HasColumnType("integer");

                    b.Property<int>("SubcategoriasId")
                        .HasColumnType("integer");

                    b.HasKey("ProfissionaisId", "SubcategoriasId");

                    b.HasIndex("SubcategoriasId");

                    b.ToTable("ProfissionalSubcategoria");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.ProfissionalSubcategoria", b =>
                {
                    b.HasOne("Iltuttofare.Api.Models.Profissional", "Profissional")
                        .WithMany("ProfissionalSubcategorias")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iltuttofare.Api.Models.Subcategoria", "Subcategoria")
                        .WithMany("ProfissionalSubcategorias")
                        .HasForeignKey("SubcategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profissional");

                    b.Navigation("Subcategoria");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.Subcategoria", b =>
                {
                    b.HasOne("Iltuttofare.Api.Models.Categoria", "Categoria")
                        .WithMany("Subcategorias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("ProfissionalSubcategoria", b =>
                {
                    b.HasOne("Iltuttofare.Api.Models.Profissional", null)
                        .WithMany()
                        .HasForeignKey("ProfissionaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iltuttofare.Api.Models.Subcategoria", null)
                        .WithMany()
                        .HasForeignKey("SubcategoriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.Categoria", b =>
                {
                    b.Navigation("Subcategorias");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.Profissional", b =>
                {
                    b.Navigation("ProfissionalSubcategorias");
                });

            modelBuilder.Entity("Iltuttofare.Api.Models.Subcategoria", b =>
                {
                    b.Navigation("ProfissionalSubcategorias");
                });
#pragma warning restore 612, 618
        }
    }
}
